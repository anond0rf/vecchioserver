// Package handlers provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package handlers

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Error Error describing the failure in submitting the thread/reply
	Error string `json:"error"`
}

// Reply Reply data.
type Reply struct {
	// Board Board where the reply is to be posted (e.g., 'b').
	Board string `json:"board"`

	// Body The message of the reply.
	Body *string `json:"body,omitempty"`

	// Email Email of the poster.
	Email *string `json:"email,omitempty"`

	// Embed URL for an embedded media link (YouTube, Spotify...).
	Embed *string `json:"embed,omitempty"`

	// Files Paths of the files to attach to the reply.
	Files *[]string `json:"files,omitempty"`

	// Name Name of the poster.
	Name *string `json:"name,omitempty"`

	// Password Password used to delete or edit the reply.
	Password *string `json:"password,omitempty"`

	// Sage Replaces email with 'rabbia' and prevents bumping the thread.
	Sage *bool `json:"sage,omitempty"`

	// Spoiler Marks attached files as spoiler.
	Spoiler *bool `json:"spoiler,omitempty"`

	// Thread ID of the thread to reply to.
	Thread int `json:"thread"`
}

// SuccessResponse defines model for SuccessResponse.
type SuccessResponse struct {
	// Id ID of the submitted thread or reply
	Id int `json:"id"`
}

// Thread Thread data.
type Thread struct {
	// Board Board where the thread is to be posted (e.g., 'b').
	Board string `json:"board"`

	// Body The message of the thread.
	Body *string `json:"body,omitempty"`

	// Email Email of the poster.
	Email *string `json:"email,omitempty"`

	// Embed URL for an embedded media link (YouTube, Spotify...).
	Embed *string `json:"embed,omitempty"`

	// Files Paths of the files to attach to the thread.
	Files *[]string `json:"files,omitempty"`

	// Name Name of the poster.
	Name *string `json:"name,omitempty"`

	// Password Password used to delete or edit the thread.
	Password *string `json:"password,omitempty"`

	// Sage Replaces email with 'rabbia' and prevents bumping the thread.
	Sage *bool `json:"sage,omitempty"`

	// Spoiler Marks attached files as spoiler.
	Spoiler *bool `json:"spoiler,omitempty"`

	// Subject Subject of the thread.
	Subject *string `json:"subject,omitempty"`
}

// PostReplyJSONRequestBody defines body for PostReply for application/json ContentType.
type PostReplyJSONRequestBody = Reply

// NewThreadJSONRequestBody defines body for NewThread for application/json ContentType.
type NewThreadJSONRequestBody = Thread

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Post reply
	// (POST /reply)
	PostReply(ctx echo.Context) error
	// Create new thread
	// (POST /thread)
	NewThread(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostReply converts echo context to params.
func (w *ServerInterfaceWrapper) PostReply(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostReply(ctx)
	return err
}

// NewThread converts echo context to params.
func (w *ServerInterfaceWrapper) NewThread(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.NewThread(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/reply", wrapper.PostReply)
	router.POST(baseURL+"/thread", wrapper.NewThread)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXXW/bNhT9KxfsgLSAJidt96K3NeuAAFsRJN6Aoc7DlXRtMZVIjqTiGoH/+8APWbHF",
	"dGmAbQnWJ8v8uPfcw8Ojq1tWyU5JQcIaVtwyUzXUoX98r7XUF2SUFIbcAH3GTrXh0c2xIv5uM6a0VKQt",
	"J3Nn+pbVZCrNleVSsCJEhDBWcrEC2xAskbe9JuACTF923NphxjaasJ5pUu2GZWP6GD5jdqPcX2M1Fyu2",
	"3WZM058911Sz4mNcdbVbJstrqqwDe+EjTuD5YajRYn433S0rJeqaFaxkGStlvWEFmzfcADeAIGgNHiJY",
	"GSHDYvHiBOQS/EaYlTOWsSVvHTkf2WmxWCi0zWJh5WLhhk/yTr1lWWLmdb6msvNF+MisOJmQHdEdVvPO",
	"5143pMmzGTBy42CWBEoaSzW8pHyVZ3BUHr3aK9rXesDvUPxhpnlD0JExuCJX9C7ZfsCvZ2ySnjrkbUJW",
	"bnjI7OvSeXp7SQmifrv4BZZSAwrwK2qqoaOaI7RcfIKXf8h+3peUwaWSli83eZ6/SsaPJ3wY/xxtYwZ4",
	"fo2rG63FqgkMpPh6rE64pc6DmMCLA6g1btx/gR1N0X7Ajh7ApUJj1jKlu/M4A72h2tVXU0uWQGqgmtv9",
	"cidxnYjSNxMrMuAVAGtuGzjSWJYcjwBFDUrTjbMwKPtO7fvHnTSllC2h8HmU5C0lPOpX1J9MPB2q43mh",
	"gbghHW24nIfBzn4aqIwyt3Kn/L3TPtlF5cLSivTEzcIt36VK2dplX1VkzD2WzZPmwb+IOhqyO8eAX2qY",
	"2PHfY+dpvPN7WAvjjzLiAaZ4qPXm12rFrh7rqTHdv2Sqo57vc9V0+f8jH01QdP+pPxOznNjYc3dL0wcL",
	"mES7DBNTvX+50QuXdeowbh0XS5lg6P3lHH48P/N6da6lsfJtp+fqhqqq4bJqULjc3Pqb9nsYvSR9Q9pt",
	"Zhm7IW1CxJP8OD92xUlFAhVnBXuTH+dvmDt923iRxU62uGVOKwkxSGMBx9bIXaTP3MR+2Hulj6/RbTir",
	"45aLaMiOEjL2XbSTSgpLwqdBpVpe+V2za+NyDY2+e/pO05IV7MVs/BKYxc+AWYi93Wfc6p78QHjP+Npe",
	"Hx8/IGnidfQwHIevNo8o1b1HBzZh/bJvPTUNYU3aAz0NCL+fe62kXDfWAE5NYz8bEjsxjohHG54UO9Ws",
	"Q/z2a1mafGc9jK79T7cEWWfiBlteQ9SMf9c+IZ5+eCo8/Yy8DcbshLXrfZ4GT95Kuw71ZjCPAZ/Fle93",
	"HGi3+sqtnY1datp/TjWhpUkrgWAUVXzJKxia0H0T+kDr+WBP/4QJxeDPwoVi71p5Kp+5D33zmv/Ia4J6",
	"xnf+E7Sb6BWjU6RdZ7v9KwAA//+pEx2jYRQAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
